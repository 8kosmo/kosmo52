package com.thread;
class ATM implements Runnable{
//class ATM extends Thread{
	private long depositeMoney = 10000;
	//지연, 경합, 순서대로........
	public void run() {
		//두 개의 스레드가 돈을 뽑기 위해 ATM기를 공유하는 상황
		//서로 인터셉트를 하거나 당할 수 있다.
		//먼저 선점한 스레드가 사용중이면 다른 스레드는 진입해서는 안됨.
		//그런 상황을 예방할 수 있는 예약어가 동기화 코드
		synchronized(this) {
			//10번 인출 진행
			for(int i=0;i<10;i++) {//지연처리
				try {
					Thread.sleep(1000);//지연처리
				} catch (InterruptedException e) {
					//인터셉트가 일어나면 여기....
					System.out.println("어 내 차례아닌가요?");
					e.printStackTrace();//기억
				}
				//잔고가 부족할 때 for문 탈출
				if(getDepositeMoney()<=0) {
					break;
				}
				withDraw(1000);
			}///////////end of for
		}///////////////end of synchronized		
	}
	//파라미터로 인출할 금액을 받는다.
	//전체 잔고에서 그 금액 차감
	//잔액을 출력
	//스레드 출력
	public void withDraw(long howMuch) {

		//잔고가 0보다 크니?
		if(getDepositeMoney()>0) {
			depositeMoney-=howMuch;
			System.out.println(Thread.currentThread().getName());
			//잔액을 반환하는 메소드의 리턴값으로 %d자리 채움
			System.out.printf("잔액 : %d원 %n", getDepositeMoney());
		}
		//잔고가 0보다 작거나 요청 금액보다 작을때
		else {
			System.out.print(Thread.currentThread().getName()+" : ");			
			System.out.println("잔액이 부족합니다.");
		}
	}
	//잔고를 가져오는 메소드 선언
	public long getDepositeMoney() {
		return depositeMoney;
	}
}
public class SynchronizedEx {

	public static void main(String[] args) {
		ATM atm = new ATM();
		//insert here - 엄마 와 아들 스레드 추가하기
		//엄마 스레드 추가
		Thread mother = new Thread(atm,"mother");
		//아들 스레드 추가
		Thread son = new Thread(atm,"son");
		mother.start();
		son.start();

	}

}
